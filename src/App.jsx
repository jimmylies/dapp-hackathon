import React, { useState, useEffect } from "react";
import { ethers } from "ethers";
import "./App.css";
import abi from "./utils/Delegate.json";
import { delegate } from "./delegate/delegate";
import { styled } from "@mui/material/styles";
// import Checkbox from '@material-ui/core/Checkbox';
import Slider from "@mui/material/Slider";
import MuiInput from "@mui/material/Input";
import { swappersRefund } from "./delegate/swappersRefund";

const Input = styled(MuiInput)`
  width: 25%;
  margin: 0 auto;
  color: #fff;
  border: #fff;
  margin-left: 2rem;
`;

function App() {
  const [currentAccount, setCurrentAccount] = useState();
  const [allocatedShare, setAllocatedShare] = useState(30000 / 24);

  const contractAddress = "0x7e10DeD0434da7B2889A33A794B2e0E06f831Bb2";
  const contractABI = abi.output.abi;

  const baseFunction = () => {
    const { ethereum } = window;
    if (ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();
      const delegateContract = new ethers.Contract(
        contractAddress,
        contractABI,
        signer
      );

      return delegateContract;
    }
  };

  const connectWallet = async () => {
    const { ethereum } = window;
    if (!ethereum) {
      alert("Get MetaMask!");
      return;
    }
    const accounts = await ethereum.request({
      method: "eth_requestAccounts",
    });
    setCurrentAccount(accounts[0]);
  };

  const register = async () => {
    const delegateContract = baseFunction();
    const viewTxn = await delegateContract.addStaker(allocatedShare);
    await viewTxn.wait();
  };

  const registerMultiple = async () => {
    const delegateContract = baseFunction();
    const viewTxn = await delegateContract.addStakerMultipleEpoch(
      allocatedShare
    );
    await viewTxn.wait();
  };
  
  const registerSwap = async () => {
    const delegateContract = baseFunction();
    const viewTxn = await delegateContract.addSwapper();
    await viewTxn.wait();
  };

  const getTotalShills = async () => {
    const delegateContract = baseFunction();
    const count = await delegateContract.totalShills();
  };

  const portionRemaining = 1250; //Call api to check the remaining portion for each address

  //input pourcentage
  const [value, setValue] = React.useState(portionRemaining);

  const handleSliderChange = (event, newValue) => {
    setValue(newValue);
  };

  const handleInputChange = (event) => {
    setValue(event.target.value === "" ? "" : Number(event.target.value));
  };

  const handleBlur = () => {
    if (value < 0) {
      setValue(0);
    } else if (value > portionRemaining) {
      setValue(portionRemaining);
    }
  };

  const [rewards, setRewards] = useState([1250]);
  const [stakedPSP, setStakedPSP] = useState([70000]);

  useEffect(() => {
    const stakers = ["0x1234"];
    const swappers = ["0x1234"];
    setStakedPSP([70000]);
    const gasSpentPerSwapper = [733];
    const volumeToRefund = 10000;
    const delegateParts = [value];
    setRewards(delegate(stakers, stakedPSP, delegateParts));
    swappersRefund(swappers, gasSpentPerSwapper, volumeToRefund);
  }, [value]);

  const [isChecked, setIsChecked] = useState(false);

  const handleCheck = () => {
    if (isChecked) {
      setIsChecked(false);
    } else {
      setIsChecked(true);
     }
  };

  return (
    <div className="App">
      <header>
        <svg
          className="logo"
          width="170"
          height="32"
          viewBox="0 0 170 32"
          fill="#FFFFFF"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M39.8616 32L21.426 0L2.98962 32L39.8616 32ZM8.47048 15L16.9412 0H0L8.47048 15ZM32.3325 27.7642L10.5194 27.7642L21.426 8.83249L32.3325 27.7642Z"></path>
          <path d="M145.478 22.3334C146.148 22.3334 146.802 22.31 147.44 22.2634C148.079 22.2175 148.658 22.157 149.182 22.0834C149.705 22.0091 150.164 21.9398 150.563 21.875C150.959 21.8102 151.263 21.7497 151.474 21.6943V12.6387C151.474 11.88 151.37 11.1767 151.159 10.5283C150.95 9.8803 150.614 9.31985 150.156 8.84773C149.694 8.3748 149.092 8.00455 148.351 7.73634C147.608 7.46812 146.702 7.33337 145.637 7.33337C144.59 7.33337 143.695 7.39881 142.952 7.52792C142.209 7.65768 141.66 7.79614 141.305 7.94411L141.587 9.52762C141.859 9.4351 142.289 9.3155 142.873 9.16688C143.461 9.01891 144.349 8.9446 145.542 8.9446C146.378 8.9446 147.052 9.05985 147.565 9.29164C148.079 9.52392 148.476 9.82937 148.76 10.209C149.04 10.5881 149.224 11.0136 149.308 11.4865C149.379 11.8902 149.414 12.3063 149.425 12.7308H149.433V12.9253C149.433 12.9322 149.434 12.9379 149.434 12.9448V13.8338H149.433V15.4168H149.434V20.4721C149.015 20.5464 148.508 20.6069 147.911 20.6528C147.315 20.6994 146.618 20.7221 145.823 20.7221C145.176 20.7221 144.594 20.671 144.081 20.569C143.57 20.4678 143.13 20.3059 142.764 20.0837C142.398 19.8614 142.114 19.5655 141.916 19.1939C141.717 18.8237 141.619 18.371 141.619 17.8333C141.619 17.2219 141.764 16.7321 142.057 16.3612C142.35 15.9909 142.727 15.6989 143.188 15.4859C143.647 15.2732 144.149 15.1347 144.694 15.0691C145.239 15.005 145.762 14.9729 146.264 14.9729C146.658 14.9729 147.01 14.9842 147.328 15.005V13.4674C147.301 13.4654 147.277 13.4611 147.252 13.4585C146.927 13.4301 146.618 13.4163 146.325 13.4163C145.344 13.4163 144.433 13.5001 143.595 13.6669C142.759 13.8338 142.037 14.0976 141.43 14.4584C140.824 14.8199 140.352 15.2775 140.018 15.8336C139.683 16.3889 139.516 17.0551 139.516 17.8333C139.516 18.6486 139.668 19.3382 139.97 19.9023C140.273 20.4678 140.692 20.9306 141.226 21.2919C141.76 21.6527 142.387 21.9165 143.109 22.0834C143.831 22.2496 144.621 22.3334 145.478 22.3334ZM93.6594 22.3334C94.3277 22.3334 94.9818 22.31 95.6201 22.2634C96.2583 22.2175 96.8396 22.157 97.3622 22.0834C97.8849 22.0091 98.3458 21.9398 98.7433 21.875C99.1408 21.8102 99.4449 21.7497 99.654 21.6943V12.6387C99.654 11.88 99.5494 11.1767 99.3404 10.5283C99.1313 9.8803 98.7956 9.31985 98.3363 8.84773C97.8754 8.3748 97.2736 8.00455 96.5308 7.73634C95.788 7.46812 94.8836 7.33337 93.8162 7.33337C92.7693 7.33337 91.8745 7.39881 91.1321 7.52792C90.3892 7.65768 89.8404 7.79614 89.4847 7.94411L89.7668 9.52762C90.0384 9.4351 90.4677 9.3155 91.0542 9.16688C91.6394 9.01891 92.5286 8.9446 93.7211 8.9446C94.559 8.9446 95.2321 9.05985 95.7468 9.29164C96.2584 9.52392 96.6559 9.82937 96.9394 10.209C97.2213 10.5881 97.4034 11.0136 97.4889 11.4865C97.5602 11.8902 97.5935 12.3063 97.6046 12.7308H97.6141V20.4721C97.1944 20.5464 96.6891 20.6069 96.092 20.6528C95.495 20.6994 94.7997 20.7221 94.0046 20.7221C93.3553 20.7221 92.774 20.671 92.2625 20.569C91.7493 20.4678 91.3097 20.3059 90.9435 20.0837C90.5772 19.8614 90.2951 19.5655 90.0965 19.1939C89.8979 18.8237 89.7989 18.371 89.7989 17.8333C89.7989 17.2219 89.9449 16.7321 90.2382 16.3612C90.5301 15.9909 90.9069 15.6989 91.3678 15.4859C91.8285 15.2732 92.3306 15.1347 92.8738 15.0691C93.4186 15.005 93.9413 14.9729 94.4433 14.9729C94.8377 14.9729 95.1877 14.9842 95.5076 15.005V13.4674C95.4807 13.4654 95.4585 13.4611 95.4316 13.4585C95.1069 13.4301 94.7997 13.4163 94.5067 13.4163C93.5232 13.4163 92.6125 13.5001 91.7763 13.6669C90.9391 13.8338 90.2172 14.0976 89.6103 14.4584C89.0027 14.8199 88.5319 15.2775 88.1972 15.8336C87.8626 16.3889 87.6955 17.0551 87.6955 17.8333C87.6955 18.6486 87.8477 19.3382 88.1502 19.9023C88.454 20.4678 88.8722 20.9306 89.4055 21.2919C89.9394 21.6527 90.568 21.9165 91.2886 22.0834C92.0107 22.2496 92.801 22.3334 93.6594 22.3334ZM68.7461 22.3334C69.4148 22.3334 70.0688 22.31 70.7074 22.2634C71.3452 22.2175 71.9261 22.157 72.4496 22.0834C72.9716 22.0091 73.4333 21.9398 73.8304 21.875C74.2276 21.8102 74.5314 21.7497 74.7405 21.6943V12.6387C74.7405 11.88 74.6359 11.1767 74.4275 10.5283C74.2178 9.8803 73.8823 9.31985 73.4227 8.84773C72.9625 8.3748 72.3604 8.00455 71.6175 7.73634C70.8743 7.46812 69.9698 7.33337 68.9026 7.33337C67.8558 7.33337 66.9618 7.39881 66.2188 7.52792C65.4756 7.65768 64.9268 7.79614 64.5711 7.94411L64.854 9.52762C65.1255 9.4351 65.5542 9.3155 66.1408 9.16688C66.7261 9.01891 67.6157 8.9446 68.8085 8.9446C69.6451 8.9446 70.32 9.05985 70.833 9.29164C71.3452 9.52392 71.7437 9.82937 72.0258 10.209C72.3085 10.5881 72.4909 11.0136 72.5752 11.4865C72.6463 11.8902 72.6804 12.3063 72.6921 12.7308H72.7002L72.7005 12.9351L72.7008 12.9448V13.8338H72.7002V15.4168H72.7008V20.4721C72.2819 20.5464 71.7752 20.6069 71.1781 20.6528C70.5824 20.6994 69.8863 20.7221 69.0912 20.7221C68.4423 20.7221 67.8614 20.671 67.349 20.569C66.8362 20.4678 66.3963 20.3059 66.0306 20.0837C65.6644 19.8614 65.3817 19.5655 65.1837 19.1939C64.9845 18.8237 64.8855 18.371 64.8855 17.8333C64.8855 17.2219 65.0315 16.7321 65.3247 16.3612C65.6168 15.9909 65.9936 15.6989 66.4545 15.4859C66.9147 15.2732 67.4165 15.1347 67.961 15.0691C68.5047 15.005 69.0288 14.9729 69.5306 14.9729C69.924 14.9729 70.2748 14.9842 70.5941 15.005V13.4674C70.5682 13.4654 70.5452 13.4611 70.5192 13.4585C70.1944 13.4301 69.8863 13.4163 69.593 13.4163C68.6093 13.4163 67.6992 13.5001 66.8628 13.6669C66.0257 13.8338 65.3036 14.0976 64.6967 14.4584C64.0891 14.8199 63.6184 15.2775 63.2836 15.8336C62.9496 16.3889 62.782 17.0551 62.782 17.8333C62.782 18.6486 62.934 19.3382 63.2367 19.9023C63.5405 20.4678 63.9586 20.9306 64.4919 21.2919C65.0265 21.6527 65.6545 21.9165 66.3765 22.0834C67.0984 22.2496 67.8874 22.3334 68.7461 22.3334ZM157.512 27.3334V21.2945C157.87 21.5384 158.443 21.7957 159.232 22.0676C160.022 22.3382 160.953 22.4745 162.025 22.4745C163.204 22.4745 164.25 22.2872 165.166 21.9128C166.082 21.5384 166.854 21.0189 167.486 20.3535C168.117 19.6887 168.596 18.8934 168.921 17.9658C169.248 17.0386 169.412 16.023 169.412 14.9182C169.412 13.7384 169.216 12.6808 168.827 11.7441C168.437 10.808 167.891 10.0122 167.187 9.35627C166.481 8.70115 165.639 8.20056 164.661 7.85352C163.683 7.50713 162.594 7.33337 161.394 7.33337C159.942 7.33337 158.743 7.41797 157.797 7.58684C156.849 7.7549 156.07 7.93323 155.46 8.12036V27.3334H157.512ZM79.8421 22.3334V9.43984C80.0158 9.36436 80.3788 9.26956 80.9311 9.15527C81.4833 9.0418 82.2142 8.98433 83.1251 8.98433C83.9912 8.98433 84.6894 9.0276 85.2211 9.11266C85.7514 9.19854 86.1032 9.27848 86.2767 9.35396L86.699 7.76048C86.4605 7.66567 86.0333 7.57137 85.4157 7.4759C84.7983 7.3811 84.143 7.33337 83.4492 7.33337C82.0848 7.33337 80.9252 7.44304 79.9715 7.66105C79.0184 7.87923 78.2708 8.09344 77.7301 8.30171V22.3334H79.8421ZM47.8928 27.3334V21.2945C48.2499 21.5384 48.8236 21.7957 49.6125 22.0676C50.402 22.3382 51.3328 22.4745 52.406 22.4745C53.5845 22.4745 54.6315 22.2872 55.5467 21.9128C56.4626 21.5384 57.2359 21.0189 57.8667 20.3535C58.4983 19.6887 58.9767 18.8934 59.3028 17.9658C59.6294 17.0386 59.7924 16.023 59.7924 14.9182C59.7924 13.7384 59.5976 12.6808 59.2088 11.7441C58.8187 10.808 58.2718 10.0122 57.5675 9.35627C56.862 8.70115 56.0207 8.20056 55.0422 7.85352C54.0628 7.50713 52.9746 7.33337 51.7751 7.33337C50.323 7.33337 49.1235 7.41797 48.1764 7.58684C47.2295 7.7549 46.4512 7.93323 45.8408 8.12036V27.3334H47.8928ZM107.432 22.3334C109.343 22.3334 110.85 21.9949 111.953 21.3175C113.054 20.64 113.606 19.6432 113.606 18.3253C113.606 17.63 113.469 17.0517 113.197 16.5897C112.922 16.1285 112.566 15.7345 112.126 15.4049C111.684 15.0754 111.174 14.7934 110.598 14.5592C110.02 14.3257 109.416 14.0961 108.787 13.8715C108.178 13.6463 107.637 13.441 107.164 13.2528C106.692 13.0661 106.293 12.8638 105.967 12.6476C105.641 12.4302 105.395 12.1806 105.228 11.8972C105.058 11.6144 104.975 11.2754 104.975 10.8787C104.975 10.8567 104.978 8.24789 104.979 7.51993L104.98 7.33337H102.909C102.905 7.40662 102.898 10.3455 102.896 10.9413L102.896 11.0445C102.896 11.665 103.022 12.1922 103.275 12.6246C103.527 13.0577 103.861 13.4293 104.282 13.7397C104.702 14.05 105.185 14.3226 105.73 14.5579C106.277 14.7934 106.854 15.0237 107.464 15.2495C108.219 15.5315 108.855 15.776 109.37 15.9832C109.883 16.1899 110.298 16.4067 110.613 16.6326C110.929 16.8584 111.153 17.1118 111.291 17.3945C111.426 17.6766 111.495 18.0157 111.495 18.4105C111.495 19.2382 111.112 19.8262 110.346 20.1742C109.58 20.5229 108.609 20.6963 107.432 20.6963C106.781 20.6963 106.209 20.6591 105.716 20.5836C105.222 20.5088 104.797 20.4185 104.44 20.3155C104.082 20.2125 103.799 20.1172 103.589 20.0335C103.379 19.9483 103.243 19.8876 103.179 19.8499L102.644 21.5145C102.896 21.6283 103.4 21.7928 104.157 22.0083C104.912 22.2253 106.004 22.3334 107.432 22.3334ZM122.288 22.3334C122.614 21.7048 122.957 20.9984 123.319 20.2127C123.68 19.4277 124.053 18.5886 124.435 17.6956C124.819 16.8018 125.191 15.8628 125.548 14.877C125.908 13.8925 126.251 12.8845 126.576 11.8534C126.904 12.8822 127.247 13.8875 127.608 14.8709C127.968 15.8536 128.34 16.7915 128.725 17.6838C129.111 18.577 129.484 19.4154 129.848 20.1998C130.21 20.9842 130.559 21.6957 130.889 22.3334H132.863C133.981 20.2951 135.008 18.14 135.938 15.8671C136.871 13.5948 137.73 11.0832 138.519 8.33337H136.419C136.18 9.29203 135.879 10.3269 135.517 11.4385C135.156 12.5502 134.766 13.6524 134.351 14.7433C133.933 15.8345 133.518 16.8713 133.101 17.8538C132.685 18.8372 132.29 19.6708 131.918 20.3563C131.478 19.4535 131.045 18.4874 130.62 17.4574C130.192 16.428 129.788 15.3853 129.408 14.3302C129.028 13.2738 128.679 12.2364 128.363 11.2169C128.048 10.1968 127.793 9.23625 127.598 8.33337H125.763C125.503 9.23499 125.211 10.1955 124.885 11.2163C124.558 12.237 124.211 13.2706 123.842 14.3179C123.473 15.3657 123.078 16.4048 122.658 17.4352C122.238 18.4665 121.818 19.4308 121.4 20.3287C121.028 19.6431 120.628 18.812 120.201 17.8361C119.773 16.8608 119.352 15.8272 118.935 14.7352C118.519 13.6438 118.128 12.5434 117.768 11.433C117.406 10.3239 117.103 9.29078 116.862 8.33337H114.602C115.386 11.0782 116.24 13.5887 117.169 15.8633C118.097 18.1375 119.12 20.2944 120.241 22.3334L122.288 22.3334ZM161.886 21.3334C161.389 21.3334 160.916 21.29 160.464 21.2054C160.01 21.1202 159.589 21.0103 159.2 20.8772C158.812 20.7447 158.472 20.6026 158.181 20.4501C157.891 20.2983 157.648 20.1556 157.453 20.0224V9.73265C157.777 9.6377 158.258 9.54723 158.893 9.46123C159.53 9.37604 160.366 9.33337 161.401 9.33337C163.213 9.33337 164.668 9.85157 165.768 10.8871C166.87 11.9229 167.419 13.4095 167.419 15.3478C167.419 16.1646 167.322 16.9398 167.128 17.6706C166.934 18.4026 166.62 19.0384 166.189 19.5805C165.758 20.1218 165.192 20.5495 164.491 20.863C163.789 21.1762 162.922 21.3334 161.886 21.3334ZM52.2663 21.3334C51.7695 21.3334 51.2956 21.29 50.8428 21.2054C50.3895 21.1202 49.969 21.0103 49.5806 20.8772C49.1922 20.7447 48.8523 20.6026 48.5616 20.4501C48.2708 20.2983 48.0279 20.1556 47.8339 20.0224V9.73265C48.1567 9.6377 48.6375 9.54723 49.2734 9.46123C49.9098 9.37604 50.7459 9.33337 51.7803 9.33337C53.5928 9.33337 55.0488 9.85157 56.1482 10.8871C57.2489 11.9229 57.7993 13.4095 57.7993 15.3478C57.7993 16.1646 57.7023 16.9398 57.5079 17.6706C57.3141 18.4026 57.0009 19.0384 56.5698 19.5805C56.1374 20.1218 55.5717 20.5495 54.8709 20.863C54.1693 21.1762 53.3012 21.3334 52.2663 21.3334Z"></path>
        </svg>
        <nav>
          <span>Trade</span>
          <span className="active-page">Delegate Refund</span>
          <span>Stake</span>
          <span>Farm</span>
          <span>Bridges</span>
          <span>DAO</span>
          <span>Dashboard</span>
        </nav>
        <img
          src={"./header-icons-polygon.png"}
          alt="navPart2"
          className="header-image"
        />
        <button
          className="connect"
          onClick={connectWallet}
          disabled={currentAccount}
        >
          {currentAccount
            ? `${currentAccount.substring(0, 6)}...${currentAccount.substring(
                currentAccount.length - 5
              )}`
            : "Connect wallet"}
        </button>
      </header>
      <div className="main-container">
        <div className="sign-transaction-container">
          <p>Delegate Refund</p>
          <div className="container-pourcentage">
            <Slider
              value={typeof value === "number" ? value : 0}
              min={0}
              max={portionRemaining}
              onChange={handleSliderChange}
              aria-labelledby="input-slider"
              className="range-pourcentage"
            />
            <Input
              value={value}
              size="small"
              onChange={handleInputChange}
              onBlur={handleBlur}
              className="number-pourcentage"
              inputProps={{
                step: 10,
                min: 0,
                max: portionRemaining,
                type: "text",
                "aria-labelledby": "input-slider",
              }}
            />
          </div>

          <p className="refund-infos">
            Staked = {Math.round(stakedPSP[0])} PSP
            <br />
            Expected reward = {Math.round(rewards[0])} $<br />
            Current APY* ={" "}
            {Math.round((rewards[0] / (stakedPSP[0] * 0.12)) * 100 * 24 * 100) /
              100}{" "}
            %
          </p>
          <span className="check-span">
            <input type="checkbox" id="checkMultiple" onChange={handleCheck} />
            Automated registration for delegation for each epoch
          </span>
          {isChecked ? (
            <button
              onClick={registerMultiple}
              className="container-pourcentage register"
            >
              <span>Register</span>
            </button>
          ) : (
            <button
              onClick={register}
              className="container-pourcentage register"
            >
              <span>Register</span>
            </button>
          )}
        </div>
        <div className="sign-transaction-container">
          <p>Gas Refund registration for swaps</p>
          <button
            onClick={registerSwap}
            className="container-pourcentage register lastButton"
          >
            <span>Register</span>
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;
